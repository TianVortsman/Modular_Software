-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.access_events
(
    id serial NOT NULL,
    date_time timestamp without time zone NOT NULL,
    device_id character varying(50) COLLATE pg_catalog."default",
    major_event_type integer,
    minor_event_type integer,
    raw_data jsonb,
    CONSTRAINT access_events_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.attendance_records
(
    attendance_id serial NOT NULL,
    employee_id integer NOT NULL,
    date date NOT NULL,
    time_in timestamp without time zone,
    time_out timestamp without time zone,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Present'::character varying,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    clock_number character varying(50) COLLATE pg_catalog."default",
    device_id character varying(50) COLLATE pg_catalog."default",
    verify_mode character varying(50) COLLATE pg_catalog."default",
    verify_status character varying(50) COLLATE pg_catalog."default",
    major_event_type integer,
    minor_event_type integer,
    date_time timestamp without time zone,
    clock_in_time timestamp without time zone,
    clock_time timestamp without time zone,
    CONSTRAINT attendance_records_pkey PRIMARY KEY (attendance_id)
);

CREATE TABLE IF NOT EXISTS public.break_records
(
    break_id serial NOT NULL,
    attendance_id integer NOT NULL,
    break_type_id integer NOT NULL,
    start_time timestamp without time zone NOT NULL,
    end_time timestamp without time zone,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    CONSTRAINT break_records_pkey PRIMARY KEY (break_id)
);

CREATE TABLE IF NOT EXISTS public.break_types
(
    break_type_id serial NOT NULL,
    break_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    duration_minutes integer NOT NULL,
    is_paid boolean NOT NULL DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    CONSTRAINT break_types_pkey PRIMARY KEY (break_type_id)
);

CREATE TABLE IF NOT EXISTS public.device_actions
(
    id serial NOT NULL,
    device_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    action_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    status character varying(50) COLLATE pg_catalog."default" NOT NULL,
    details jsonb,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT device_actions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.devices
(
    id serial NOT NULL,
    device_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    serial_number character varying(255) COLLATE pg_catalog."default" NOT NULL,
    device_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    ip_address character varying(45) COLLATE pg_catalog."default" NOT NULL,
    mac_address character varying(255) COLLATE pg_catalog."default",
    username character varying(255) COLLATE pg_catalog."default" DEFAULT 'admin'::character varying,
    password character varying(255) COLLATE pg_catalog."default" DEFAULT '12345'::character varying,
    firmware_version character varying(100) COLLATE pg_catalog."default",
    model character varying(100) COLLATE pg_catalog."default",
    status character varying(50) COLLATE pg_catalog."default" DEFAULT 'offline'::character varying,
    last_online timestamp without time zone,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone,
    deleted_at timestamp without time zone,
    device_type character varying(50) COLLATE pg_catalog."default" DEFAULT 'hikvision'::character varying,
    port integer DEFAULT 80,
    capabilities jsonb DEFAULT '{"camera": true, "door_control": true}'::jsonb,
    CONSTRAINT devices_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.door_config
(
    id serial NOT NULL,
    device_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    door_number integer DEFAULT 1,
    door_name character varying(100) COLLATE pg_catalog."default",
    unlock_duration integer DEFAULT 5,
    door_status character varying(50) COLLATE pg_catalog."default" DEFAULT 'closed'::character varying,
    last_updated timestamp without time zone,
    CONSTRAINT door_config_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.employees
(
    employee_id serial NOT NULL,
    first_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default",
    phone character varying(20) COLLATE pg_catalog."default",
    hire_date date,
    "position" character varying(255) COLLATE pg_catalog."default" DEFAULT 'NONE'::character varying,
    department character varying(100) COLLATE pg_catalog."default",
    manager_id integer,
    addr_id integer,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    phone_number character varying(20) COLLATE pg_catalog."default",
    division character varying(100) COLLATE pg_catalog."default",
    group_name character varying(100) COLLATE pg_catalog."default",
    cost_center character varying(100) COLLATE pg_catalog."default",
    employee_number character varying(50) COLLATE pg_catalog."default",
    status character varying(20) COLLATE pg_catalog."default" DEFAULT 'active'::character varying,
    employment_type character varying(20) COLLATE pg_catalog."default" DEFAULT 'Permanent'::character varying,
    work_schedule_type character varying(20) COLLATE pg_catalog."default" DEFAULT 'Open'::character varying,
    biometric_id character varying(100) COLLATE pg_catalog."default",
    emergency_contact_name character varying(100) COLLATE pg_catalog."default",
    emergency_contact_phone character varying(20) COLLATE pg_catalog."default",
    address text COLLATE pg_catalog."default",
    clock_number integer NOT NULL,
    CONSTRAINT employees_pkey PRIMARY KEY (employee_id),
    CONSTRAINT employees_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.holidays
(
    holiday_id serial NOT NULL,
    holiday_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    date date NOT NULL,
    description text COLLATE pg_catalog."default",
    is_paid boolean NOT NULL DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    CONSTRAINT holidays_pkey PRIMARY KEY (holiday_id)
);

CREATE TABLE IF NOT EXISTS public.leave_balances
(
    balance_id serial NOT NULL,
    employee_id integer NOT NULL,
    leave_type_id integer NOT NULL,
    year integer NOT NULL,
    total_days numeric(5, 2) NOT NULL,
    used_days numeric(5, 2) NOT NULL DEFAULT 0,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    CONSTRAINT leave_balances_pkey PRIMARY KEY (balance_id)
);

CREATE TABLE IF NOT EXISTS public.leave_requests
(
    request_id serial NOT NULL,
    employee_id integer NOT NULL,
    leave_type_id integer NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    total_days numeric(5, 2) NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Pending'::character varying,
    approved_by integer,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    CONSTRAINT leave_requests_pkey PRIMARY KEY (request_id)
);

CREATE TABLE IF NOT EXISTS public.leave_types
(
    leave_type_id serial NOT NULL,
    leave_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    is_paid boolean NOT NULL DEFAULT true,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    CONSTRAINT leave_types_pkey PRIMARY KEY (leave_type_id)
);

CREATE TABLE IF NOT EXISTS public.monthly_rosters
(
    roster_id serial NOT NULL,
    employee_id integer NOT NULL,
    month integer NOT NULL,
    year integer NOT NULL,
    created_by integer NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Draft'::character varying,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    CONSTRAINT monthly_rosters_pkey PRIMARY KEY (roster_id)
);

CREATE TABLE IF NOT EXISTS public.overtime_categories
(
    category_id serial NOT NULL,
    category_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    rate_multiplier numeric(3, 2) NOT NULL,
    description text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    CONSTRAINT overtime_categories_pkey PRIMARY KEY (category_id)
);

CREATE TABLE IF NOT EXISTS public.overtime_requests
(
    overtime_id serial NOT NULL,
    employee_id integer NOT NULL,
    category_id integer NOT NULL,
    date date NOT NULL,
    hours numeric(4, 2) NOT NULL,
    reason text COLLATE pg_catalog."default" NOT NULL,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Pending'::character varying,
    approved_by integer,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    CONSTRAINT overtime_requests_pkey PRIMARY KEY (overtime_id)
);

CREATE TABLE IF NOT EXISTS public.schedule_templates
(
    template_id serial NOT NULL,
    template_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    position_id integer NOT NULL,
    shift_id integer NOT NULL,
    day_of_week integer NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    CONSTRAINT schedule_templates_pkey PRIMARY KEY (template_id)
);

CREATE TABLE IF NOT EXISTS public.shifts
(
    shift_id serial NOT NULL,
    shift_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    start_time time without time zone,
    end_time time without time zone,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    CONSTRAINT shifts_pkey PRIMARY KEY (shift_id)
);

CREATE TABLE IF NOT EXISTS public.unknown_clockings
(
    id serial NOT NULL,
    date date NOT NULL,
    date_time timestamp without time zone NOT NULL,
    clock_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    device_id character varying(50) COLLATE pg_catalog."default",
    verify_mode character varying(50) COLLATE pg_catalog."default",
    verify_status character varying(50) COLLATE pg_catalog."default",
    major_event_type integer,
    minor_event_type integer,
    raw_data text COLLATE pg_catalog."default",
    processed boolean DEFAULT false,
    notes text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unknown_clockings_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.weekly_hours
(
    hours_id serial NOT NULL,
    employee_id integer NOT NULL,
    week_start_date date NOT NULL,
    regular_hours numeric(5, 2) NOT NULL DEFAULT 0,
    overtime_hours numeric(5, 2) NOT NULL DEFAULT 0,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    deleted_at timestamp without time zone,
    CONSTRAINT weekly_hours_pkey PRIMARY KEY (hours_id)
);

ALTER TABLE IF EXISTS public.attendance_records
    ADD CONSTRAINT fk_attendance_employee FOREIGN KEY (employee_id)
    REFERENCES public.employees (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_attendance_employee
    ON public.attendance_records(employee_id);


ALTER TABLE IF EXISTS public.break_records
    ADD CONSTRAINT fk_break_attendance FOREIGN KEY (attendance_id)
    REFERENCES public.attendance_records (attendance_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_break_attendance
    ON public.break_records(attendance_id);


ALTER TABLE IF EXISTS public.break_records
    ADD CONSTRAINT fk_break_type FOREIGN KEY (break_type_id)
    REFERENCES public.break_types (break_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS idx_break_type
    ON public.break_records(break_type_id);


ALTER TABLE IF EXISTS public.door_config
    ADD CONSTRAINT door_config_id_fkey FOREIGN KEY (id)
    REFERENCES public.devices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS door_config_pkey
    ON public.door_config(id);


ALTER TABLE IF EXISTS public.employees
    ADD CONSTRAINT fk_employee_manager FOREIGN KEY (manager_id)
    REFERENCES public.employees (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS idx_employees_manager
    ON public.employees(manager_id);


ALTER TABLE IF EXISTS public.leave_balances
    ADD CONSTRAINT fk_balance_employee FOREIGN KEY (employee_id)
    REFERENCES public.employees (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_leave_balance_employee
    ON public.leave_balances(employee_id);


ALTER TABLE IF EXISTS public.leave_balances
    ADD CONSTRAINT fk_balance_leave_type FOREIGN KEY (leave_type_id)
    REFERENCES public.leave_types (leave_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS idx_leave_balance_type
    ON public.leave_balances(leave_type_id);


ALTER TABLE IF EXISTS public.leave_requests
    ADD CONSTRAINT fk_request_approver FOREIGN KEY (approved_by)
    REFERENCES public.employees (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS idx_leave_request_approver
    ON public.leave_requests(approved_by);


ALTER TABLE IF EXISTS public.leave_requests
    ADD CONSTRAINT fk_request_employee FOREIGN KEY (employee_id)
    REFERENCES public.employees (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_leave_request_employee
    ON public.leave_requests(employee_id);


ALTER TABLE IF EXISTS public.leave_requests
    ADD CONSTRAINT fk_request_leave_type FOREIGN KEY (leave_type_id)
    REFERENCES public.leave_types (leave_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS idx_leave_request_type
    ON public.leave_requests(leave_type_id);


ALTER TABLE IF EXISTS public.monthly_rosters
    ADD CONSTRAINT fk_roster_creator FOREIGN KEY (created_by)
    REFERENCES public.employees (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS idx_roster_creator
    ON public.monthly_rosters(created_by);


ALTER TABLE IF EXISTS public.monthly_rosters
    ADD CONSTRAINT fk_roster_employee FOREIGN KEY (employee_id)
    REFERENCES public.employees (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_roster_employee
    ON public.monthly_rosters(employee_id);


ALTER TABLE IF EXISTS public.overtime_requests
    ADD CONSTRAINT fk_overtime_approver FOREIGN KEY (approved_by)
    REFERENCES public.employees (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS idx_overtime_approver
    ON public.overtime_requests(approved_by);


ALTER TABLE IF EXISTS public.overtime_requests
    ADD CONSTRAINT fk_overtime_category FOREIGN KEY (category_id)
    REFERENCES public.overtime_categories (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS idx_overtime_category
    ON public.overtime_requests(category_id);


ALTER TABLE IF EXISTS public.overtime_requests
    ADD CONSTRAINT fk_overtime_employee FOREIGN KEY (employee_id)
    REFERENCES public.employees (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_overtime_employee
    ON public.overtime_requests(employee_id);


ALTER TABLE IF EXISTS public.schedule_templates
    ADD CONSTRAINT fk_template_shift FOREIGN KEY (shift_id)
    REFERENCES public.shifts (shift_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_template_shift
    ON public.schedule_templates(shift_id);


ALTER TABLE IF EXISTS public.weekly_hours
    ADD CONSTRAINT fk_hours_employee FOREIGN KEY (employee_id)
    REFERENCES public.employees (employee_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_weekly_hours_employee
    ON public.weekly_hours(employee_id);

END;